{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["HttpService","ConnectionFactory","NegociacaoDao","Negociacao","NegociacaoService","_http","Promise","resolve","reject","get","then","negociacoes","map","objeto","Date","data","quantidade","valor","catch","erro","console","log","all","obterNegociacoesDaSemana","obterNegociacoesDaSemanaAnterior","obterNegociacoesDaSemanaRetrasada","periodos","reduce","dados","periodo","concat","dado","negociacao","getConnection","connection","dao","adiciona","Error","listaTodos","err","apagaTodos","listaAtual","obterNegociacoes","filter","some","negociacaoExistente","JSON","stringify"],"mappings":"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","file":"NegociacaoService.js","sourcesContent":["import { HttpService } from \"./HttpService\";\nimport { ConnectionFactory } from \"./ConnectionFactory\";\nimport { NegociacaoDao } from \"../dao/NegociacaoDao\";\nimport { Negociacao } from \"../models/Negociacao\";\n\nexport class NegociacaoService {\n  constructor() {\n    this._http = new HttpService();\n  }\n\n  obterNegociacoesDaSemana() {\n    return new Promise((resolve, reject) => {\n      this._http\n        .get(\"negociacoes/semana\")\n        .then((negociacoes) => {\n          resolve(\n            negociacoes.map(\n              (objeto) =>\n                new Negociacao(\n                  new Date(objeto.data),\n                  objeto.quantidade,\n                  objeto.valor\n                )\n            )\n          );\n        })\n        .catch((erro) => {\n          console.log(erro);\n          reject(\"Não foi possível obter as negociações da semana\");\n        });\n    });\n  }\n\n  obterNegociacoesDaSemanaAnterior() {\n    return new Promise((resolve, reject) => {\n      this._http\n        .get(\"negociacoes/anterior\")\n        .then((negociacoes) => {\n          resolve(\n            negociacoes.map(\n              (objeto) =>\n                new Negociacao(\n                  new Date(objeto.data),\n                  objeto.quantidade,\n                  objeto.valor\n                )\n            )\n          );\n        })\n        .catch((erro) => {\n          console.log(erro);\n          reject(\"Não foi possível obter as negociações da semana anterior\");\n        });\n    });\n  }\n\n  obterNegociacoesDaSemanaRetrasada() {\n    return new Promise((resolve, reject) => {\n      this._http\n        .get(\"negociacoes/retrasada\")\n        .then((negociacoes) => {\n          resolve(\n            negociacoes.map(\n              (objeto) =>\n                new Negociacao(\n                  new Date(objeto.data),\n                  objeto.quantidade,\n                  objeto.valor\n                )\n            )\n          );\n        })\n        .catch((erro) => {\n          console.log(erro);\n          reject(\"Não foi possível obter as negociações da semana retrasada\");\n        });\n    });\n  }\n\n  obterNegociacoes() {\n    return new Promise((resolve, reject) => {\n      Promise.all([\n        this.obterNegociacoesDaSemana(),\n        this.obterNegociacoesDaSemanaAnterior(),\n        this.obterNegociacoesDaSemanaRetrasada(),\n      ])\n        .then((periodos) => {\n          let negociacoes = periodos\n            .reduce((dados, periodo) => dados.concat(periodo), [])\n            .map(\n              (dado) =>\n                new Negociacao(new Date(dado.data), dado.quantidade, dado.valor)\n            );\n\n          resolve(negociacoes);\n        })\n        .catch((erro) => reject(erro));\n    });\n  }\n  cadastra(negociacao) {\n    return ConnectionFactory.getConnection()\n      .then((connection) => new NegociacaoDao(connection))\n      .then((dao) => dao.adiciona(negociacao))\n      .then(() => \"Negociação adicionada com sucesso!!\")\n      .catch(() => {\n        throw new Error(\"Não foi possível adicionar a negociação\");\n      });\n  }\n  lista() {\n    return ConnectionFactory.getConnection()\n      .then((connection) => new NegociacaoDao(connection))\n      .then((dao) => dao.listaTodos())\n      .catch((err) => {\n        console.log(err);\n        throw Error(\"Não foi possível obeter as negociações\");\n      });\n  }\n  apaga() {\n    return ConnectionFactory.getConnection()\n      .then((connection) => new NegociacaoDao(connection))\n      .then((dao) => dao.apagaTodos())\n      .then(() => \"Negociações apagadas com sucesso...\")\n      .catch((err) => {\n        console.log(err);\n        throw new Error(\"Não foi possível adicionar as negociações\");\n      });\n  }\n\n  importa(listaAtual) {\n    return this.obterNegociacoes()\n      .then((negociacoes) =>\n        negociacoes.filter(\n          (negociacao) =>\n            !listaAtual.some(\n              (negociacaoExistente) =>\n                JSON.stringify(negociacao) ==\n                JSON.stringify(negociacaoExistente)\n            )\n        )\n      )\n      .catch((erro) => {\n        console.log(erro);\n        throw new Error(\"Não foi possível buscar negociações para importar\");\n      });\n  }\n}\n"]}